services:
  spring-app:
    restart: always
    environment:
      - 'SPRING_DATASOURCE_URL=jdbc:postgresql://postgre-db:5432/${POSTGRES_DB}'
      - 'SPRING_DATASOURCE_USERNAME=${POSTGRES_USERNAME}'
      - 'SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}'
      - 'SERVER_PORT=${SERVER_PORT}'
    build:
      context: './server'
      dockerfile: Dockerfile
    container_name: spring-app
    networks:
      - data
    expose:
      - ${SERVER_PORT}
    ports:
      - '${SERVER_MAPPING_PORT}:${SERVER_PORT}'
    tty: true
    depends_on:
      - 'postgre-db'


  postgre-db:
    restart: always
    container_name: 'postgre-db'
    image: postgres:16.3-alpine
    volumes:
      - '${POSTGRES_VOLUME}:/var/lib/postgresql/data'
    environment:
      - 'POSTGRES_DB=${POSTGRES_DB}'
      - 'POSTGRES_USER=${POSTGRES_USERNAME}'
      - 'POSTGRES_PASSWORD=${POSTGRES_PASSWORD}'
    ports:
      - '${POSTGRES_MAPPING_PORT}:${POSTGRES_PORT}'
    expose:
      - ${POSTGRES_PORT}
    networks:
      - data
    tty: true


  angular-app:
    restart: always
    depends_on:
      - 'spring-app'
    build:
      context: './client'
      dockerfile: Dockerfile
    container_name: 'angular-app'
    networks:
      - data
    expose:
      - ${CLIENT_PORT}
    ports:
      - '${CLIENT_MAPPING_PORT}:${CLIENT_PORT}'

  redis-db:
    restart: always
    depends_on:
      - 'postgre-db'
    image: 'redis:latest'
    ports:
      - '${REDIS_PORT}:${REDIS_PORT}'
    volumes:
      - '${REDIS_VOLUME}:/data'
    expose:
      - ${REDIS_PORT}
volumes:
  postgres-data: ~

networks:
  data:
    driver: bridge